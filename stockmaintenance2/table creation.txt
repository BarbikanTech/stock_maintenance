Product Table

CREATE TABLE product (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    product_id VARCHAR(20) NOT NULL UNIQUE,
    product_name VARCHAR(100) NOT NULL,
    sku VARCHAR(20) NOT NULL UNIQUE,
    unit VARCHAR(50) NOT NULL,
    subunit VARCHAR(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delete_at TIMESTAMP NULL DEFAULT NULL
) ENGINE=InnoDB;


Product_MRP Table

CREATE TABLE product_mrp (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL,
    product_id VARCHAR(20) NOT NULL,
    mrp DECIMAL(10, 2) NOT NULL,
    opening_stock INT NOT NULL,
    current_stock INT NOT NULL,
    minimum_stock INT NOT NULL,
    excess_stock INT NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delete_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);


Vendor Table

CREATE TABLE vendors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(255) NOT NULL,
    vendor_id VARCHAR(50) NOT NULL,
    vendor_name VARCHAR(255) NOT NULL,
    mobile_number VARCHAR(15) NOT NULL,
    business_name VARCHAR(255),
    gst_number VARCHAR(50),
    address TEXT,
    deleted_at INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


Customer Table

CREATE TABLE IF NOT EXISTS `customers` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `unique_id` VARCHAR(50) NOT NULL,
    `customer_id` VARCHAR(50) NOT NULL,
    `customer_name` VARCHAR(100) NOT NULL,
    `mobile_number` VARCHAR(15) NOT NULL,
    `business_name` VARCHAR(100),
    `gst_number` VARCHAR(20),
    `address` TEXT,
    `created_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `deleted_at` TINYINT(1) DEFAULT '0',
    PRIMARY KEY (`id`),
    UNIQUE KEY `unique_id` (`unique_id`),
    UNIQUE KEY `customer_id` (`customer_id`),
    UNIQUE KEY `mobile_number` (`mobile_number`)
);



<?php
header('Content-Type: application/json');

// Include database configuration
require_once '../dbconfig/config.php';

// Read and decode JSON input
$input = json_decode(file_get_contents('php://input'), true);

// Validate required fields
if (!isset($input['vendor_id'], $input['product_id'], $input['quantity'], $input['invoice_number'], $input['mrp'])) {
    echo json_encode([
        'status' => 'error',
        'message' => 'Missing required fields'
    ]);
    exit;
}

// Get data from input
$vendorId = $input['vendor_id'];
$productId = $input['product_id'];
$quantity = (int)$input['quantity']; // Ensure quantity is an integer
$invoiceNumber = $input['invoice_number'];
$mrp = $input['mrp'];
$date = isset($input['date']) ? $input['date'] : date('Y-m-d');

// Generate a unique purchase ID and order ID
$uniqueId = uniqid();
// $orderId = 'ORD_' . str_pad(mt_rand(1, 9999), 4, '0', STR_PAD_LEFT);

try {
    // Check if the vendor exists in the vendors table
    $stmt = $pdo->prepare("SELECT * FROM vendors WHERE vendor_id = :vendor_id");
    $stmt->execute([':vendor_id' => $vendorId]);
    $vendor = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$vendor) {
        echo json_encode([
            'status' => 'error',
            'message' => 'Vendor not found'
        ]);
        exit;
    }

    // Fetch product details (name, SKU, unit) from `product` table
    $stmt = $pdo->prepare("SELECT product_id, product_name, sku, unit FROM product WHERE product_id = :product_id");
    $stmt->execute([':product_id' => $productId]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        echo json_encode([
            'status' => 'error',
            'message' => 'Product not found'
        ]);
        exit;
    }

    // Extract unit name (remove numeric prefix)
    $unitParts = explode(' ', $product['unit']);
    $unitName = isset($unitParts[1]) ? $unitParts[1] : $product['unit']; // Extract 'Barrel' from '1 Barrel'

    // Fetch MRP details from `product_mrp` table based on the provided MRP
    $stmt = $pdo->prepare("SELECT unique_id, mrp, current_stock FROM product_mrp WHERE product_id = :product_id AND mrp = :mrp");
    $stmt->execute([':product_id' => $product['product_id'], ':mrp' => $mrp]);
    $mrpDetails = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$mrpDetails) {
        echo json_encode([
            'status' => 'error',
            'message' => 'MRP not found for the product'
        ]);
        exit;
    }

    // Check if stock is sufficient
    if ($mrpDetails['current_stock'] < $quantity) {
        echo json_encode([
            'status' => 'error',
            'message' => 'Insufficient stock for the selected MRP'
        ]);
        exit;
    }

    // Combine quantity and unit for storage
    $quantityWithUnit = $quantity . ' ' . $unitName; // Example: "10 Barrel"

    // Generate sequential order ID in the format ORD_001
    $stmt = $pdo->prepare("SELECT order_id FROM purchase ORDER BY id DESC LIMIT 1");
    $stmt->execute();
    $lastOrder = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($lastOrder) {
        // Extract numeric part of the last order_id and increment it
        $lastNumber = (int)substr($lastOrder['order_id'], 4);
        $newNumber = str_pad($lastNumber + 1, 3, '0', STR_PAD_LEFT); // Increment and pad with zeros
    } else {
        $newNumber = '001'; // Start with 001 if no previous orders exist
    }
    $orderId = "ORD_" . $newNumber;

    // Insert the purchase record
    $stmt = $pdo->prepare("INSERT INTO purchase (unique_id, date, order_id, invoice_number, vendor_id, product_id, product_name, sku, quantity, mrp) 
                           VALUES (:unique_id, :date, :order_id, :invoice_number, :vendor_id, :product_id, :product_name, :sku, :quantity, :mrp)");
    $stmt->execute([
        ':unique_id' => $uniqueId,
        ':date' => $date,
        ':order_id' => $orderId,
        ':invoice_number' => $invoiceNumber,
        ':vendor_id' => $vendorId,
        ':product_id' => $product['product_id'],
        ':product_name' => $product['product_name'],
        ':sku' => $product['sku'],
        ':quantity' => $quantityWithUnit, // Store as "10 Barrel"
        ':mrp' => $mrp
    ]);

    // Update stock in the `product_mrp` table
    $newStock = $mrpDetails['current_stock'] + $quantity; // Add numeric quantity
    $stmt = $pdo->prepare("UPDATE product_mrp SET current_stock = :current_stock WHERE unique_id = :unique_id");
    $stmt->execute([
        ':current_stock' => $newStock,
        ':unique_id' => $mrpDetails['unique_id']
    ]);

    // Return success response
    echo json_encode([
        'status' => 'success',
        'message' => 'Purchase record created successfully',
        'data' => [
            'unique_id' => $uniqueId,
            'order_id' => $orderId,
            'product_id' => $productId,
            'product_name' => $product['product_name'],
            'sku' => $product['sku'],
            'quantity' => $quantityWithUnit, // Return as "10 Barrel"
            'mrp' => $mrp
        ]
    ]);
} catch (PDOException $e) {
    echo json_encode([
        'status' => 'error',
        'message' => 'Database error: ' . $e->getMessage()
    ]);
}
?>

